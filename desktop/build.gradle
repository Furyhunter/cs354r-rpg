apply plugin: "java"
apply plugin: "application"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

mainClassName = "rpg.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

run {
    workingDir = project.assetsDir
    standardInput = System.in
}

startScripts {
    classpath += files("assets")
    applicationName = "rpggame"
}

distZip {
    baseName = "rpggame"
    from(project.assetsDir, {
        into archiveName.substring(0, archiveName.length() - 4) + "/lib/assets"
    })
}

/*task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes*/

jar {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}